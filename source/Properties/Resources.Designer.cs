//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace epub2cbz_gui.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("epub2cbz_gui.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Abort ähnelt.
        /// </summary>
        internal static string AbortButtonText {
            get {
                return ResourceManager.GetString("AbortButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Process was aborted. ähnelt.
        /// </summary>
        internal static string AbortedMessage {
            get {
                return ResourceManager.GetString("AbortedMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Process is being aborted. Please wait a moment... ähnelt.
        /// </summary>
        internal static string AbortingMessage {
            get {
                return ResourceManager.GetString("AbortingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap arrows {
            get {
                object obj = ResourceManager.GetObject("arrows", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap arrows_light {
            get {
                object obj = ResourceManager.GetObject("arrows_light", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error creating blank image.  ähnelt.
        /// </summary>
        internal static string BlankImageError {
            get {
                return ResourceManager.GetString("BlankImageError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Switch Mode ähnelt.
        /// </summary>
        internal static string ButtonSwitchFileFolderMode {
            get {
                return ResourceManager.GetString("ButtonSwitchFileFolderMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cancel ähnelt.
        /// </summary>
        internal static string CancelButtonText {
            get {
                return ResourceManager.GetString("CancelButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A file with that name already exists. Please delete &apos;{0}&apos; ähnelt.
        /// </summary>
        internal static string CbzAlreadyExists {
            get {
                return ResourceManager.GetString("CbzAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cogwheel {
            get {
                object obj = ResourceManager.GetObject("cogwheel", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cogwheel_light {
            get {
                object obj = ResourceManager.GetObject("cogwheel_light", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Create ComicInfo.xml ähnelt.
        /// </summary>
        internal static string ComicInfoCheckboxText {
            get {
                return ResourceManager.GetString("ComicInfoCheckboxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Confirmation ähnelt.
        /// </summary>
        internal static string ConfirmationMessageBox {
            get {
                return ResourceManager.GetString("ConfirmationMessageBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; container.xml not found. ähnelt.
        /// </summary>
        internal static string ContainerXMLNotFound {
            get {
                return ResourceManager.GetString("ContainerXMLNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap empty {
            get {
                object obj = ResourceManager.GetObject("empty", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap error_icon {
            get {
                object obj = ResourceManager.GetObject("error_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error ähnelt.
        /// </summary>
        internal static string ErrorMessageBox {
            get {
                return ResourceManager.GetString("ErrorMessageBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Couldn&apos;t open file &apos;{0}&apos;. ähnelt.
        /// </summary>
        internal static string FileCouldNotBeOpened {
            get {
                return ResourceManager.GetString("FileCouldNotBeOpened", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die File List ähnelt.
        /// </summary>
        internal static string FileList {
            get {
                return ResourceManager.GetString("FileList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Added: ähnelt.
        /// </summary>
        internal static string FileModeAddedFilename {
            get {
                return ResourceManager.GetString("FileModeAddedFilename", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Clear ähnelt.
        /// </summary>
        internal static string FileModeClearButton {
            get {
                return ResourceManager.GetString("FileModeClearButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Do you really want to empty the list? ähnelt.
        /// </summary>
        internal static string FileModeClearListMessage {
            get {
                return ResourceManager.GetString("FileModeClearListMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die File list has been cleared. ähnelt.
        /// </summary>
        internal static string FileModeFileListCleared {
            get {
                return ResourceManager.GetString("FileModeFileListCleared", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Files added: {0} ähnelt.
        /// </summary>
        internal static string FileModeFilesAdded {
            get {
                return ResourceManager.GetString("FileModeFilesAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please drag and drop EPUB files into this text window. ähnelt.
        /// </summary>
        internal static string FileModeNoEpubs {
            get {
                return ResourceManager.GetString("FileModeNoEpubs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No new files were added. ähnelt.
        /// </summary>
        internal static string FileModeNoFilesAdded {
            get {
                return ResourceManager.GetString("FileModeNoFilesAdded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Total files: {0} ähnelt.
        /// </summary>
        internal static string FileModeTotalFiles {
            get {
                return ResourceManager.GetString("FileModeTotalFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die File Name ähnelt.
        /// </summary>
        internal static string FileName {
            get {
                return ResourceManager.GetString("FileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die File Path ähnelt.
        /// </summary>
        internal static string FilePath {
            get {
                return ResourceManager.GetString("FilePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Extract Images ähnelt.
        /// </summary>
        internal static string ImagesCheckboxText {
            get {
                return ResourceManager.GetString("ImagesCheckboxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap info_icon {
            get {
                object obj = ResourceManager.GetObject("info_icon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap input_folder {
            get {
                object obj = ResourceManager.GetObject("input_folder", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; seems to be DRM protected. ähnelt.
        /// </summary>
        internal static string IsDRMProtected {
            get {
                return ResourceManager.GetString("IsDRMProtected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use mangalist.txt ähnelt.
        /// </summary>
        internal static string MangalistCheckboxText {
            get {
                return ResourceManager.GetString("MangalistCheckboxText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Will only process EPUBs listed in a mangalist.txt file located in the selected folder. ähnelt.
        /// </summary>
        internal static string MangalistCheckboxTooltip {
            get {
                return ResourceManager.GetString("MangalistCheckboxTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Couldn&apos;t find a .ncx or .nav file in the .opf of {0} ähnelt.
        /// </summary>
        internal static string NcxOrNavNotInOpf {
            get {
                return ResourceManager.GetString("NcxOrNavNotInOpf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enable either &apos;Create ComicInfo.xml&apos; or &apos;Extract Images&apos;. ähnelt.
        /// </summary>
        internal static string NoCheckBoxChecked {
            get {
                return ResourceManager.GetString("NoCheckBoxChecked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No EPUBs found. ähnelt.
        /// </summary>
        internal static string NoEpubsFoundMessageBox {
            get {
                return ResourceManager.GetString("NoEpubsFoundMessageBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die mangalist.txt not found. ähnelt.
        /// </summary>
        internal static string NoMangalistMessageBox {
            get {
                return ResourceManager.GetString("NoMangalistMessageBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No Path selected. ähnelt.
        /// </summary>
        internal static string NoPathMessageBox {
            get {
                return ResourceManager.GetString("NoPathMessageBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; doesn&apos;t seem to be a Manga/Comic. ähnelt.
        /// </summary>
        internal static string NotAManga {
            get {
                return ResourceManager.GetString("NotAManga", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; doesn&apos;t seem to be an EPUB. ähnelt.
        /// </summary>
        internal static string NotAnEPUB {
            get {
                return ResourceManager.GetString("NotAnEPUB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;{0}&apos; OPF file not found. ähnelt.
        /// </summary>
        internal static string OPFFileNotFound {
            get {
                return ResourceManager.GetString("OPFFileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap output_folder {
            get {
                object obj = ResourceManager.GetObject("output_folder", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input Folder ähnelt.
        /// </summary>
        internal static string PathButtonTextInput {
            get {
                return ResourceManager.GetString("PathButtonTextInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Output Folder ähnelt.
        /// </summary>
        internal static string PathButtonTextOutput {
            get {
                return ResourceManager.GetString("PathButtonTextOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Clear ähnelt.
        /// </summary>
        internal static string PathClearButtonText {
            get {
                return ResourceManager.GetString("PathClearButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Path ähnelt.
        /// </summary>
        internal static string PathLabelText {
            get {
                return ResourceManager.GetString("PathLabelText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Processed: &apos;{0}&apos; ähnelt.
        /// </summary>
        internal static string Processed {
            get {
                return ResourceManager.GetString("Processed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Processing. Please wait. ähnelt.
        /// </summary>
        internal static string ProcessingInProgress {
            get {
                return ResourceManager.GetString("ProcessingInProgress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Info: Removed duplicate cover for &apos;{0}&apos; ähnelt.
        /// </summary>
        internal static string RemovedDuplicateCover {
            get {
                return ResourceManager.GetString("RemovedDuplicateCover", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Replace Series Name ähnelt.
        /// </summary>
        internal static string ReplaceSeries {
            get {
                return ResourceManager.GetString("ReplaceSeries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enter new series name here. ähnelt.
        /// </summary>
        internal static string ReplaceSeriesPlaceholder {
            get {
                return ResourceManager.GetString("ReplaceSeriesPlaceholder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Reset Settings ähnelt.
        /// </summary>
        internal static string ResetSettings {
            get {
                return ResourceManager.GetString("ResetSettings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Authors ähnelt.
        /// </summary>
        internal static string SettingsAuthor {
            get {
                return ResourceManager.GetString("SettingsAuthor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Chapters ähnelt.
        /// </summary>
        internal static string SettingsChapters {
            get {
                return ResourceManager.GetString("SettingsChapters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Fastest ähnelt.
        /// </summary>
        internal static string SettingsCompressionLevelFastest {
            get {
                return ResourceManager.GetString("SettingsCompressionLevelFastest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No Compression ähnelt.
        /// </summary>
        internal static string SettingsCompressionLevelNoCompression {
            get {
                return ResourceManager.GetString("SettingsCompressionLevelNoCompression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Optimal ähnelt.
        /// </summary>
        internal static string SettingsCompressionLevelOptimal {
            get {
                return ResourceManager.GetString("SettingsCompressionLevelOptimal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Smallest Size ähnelt.
        /// </summary>
        internal static string SettingsCompressionLevelSmallestSize {
            get {
                return ResourceManager.GetString("SettingsCompressionLevelSmallestSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die &apos;No Compression&apos; is fastest and recommended, as the images are already in a compressed format. ähnelt.
        /// </summary>
        internal static string SettingsCompressionLevelTooltip {
            get {
                return ResourceManager.GetString("SettingsCompressionLevelTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Color tolerance: ähnelt.
        /// </summary>
        internal static string SettingsCroppingColorTolerance {
            get {
                return ResourceManager.GetString("SettingsCroppingColorTolerance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die How uniform the color of the margin has to be. The higher the value, the more forgiving it is. (0 - 255) ähnelt.
        /// </summary>
        internal static string SettingsCroppingColorToleranceTooltip {
            get {
                return ResourceManager.GetString("SettingsCroppingColorToleranceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Crop images ähnelt.
        /// </summary>
        internal static string SettingsCroppingCropImages {
            get {
                return ResourceManager.GetString("SettingsCroppingCropImages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Margin of error: ähnelt.
        /// </summary>
        internal static string SettingsCroppingDeviationTolerance {
            get {
                return ResourceManager.GetString("SettingsCroppingDeviationTolerance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die How many deviating Pixels are allowed per row to still be considered part of the background. In percent. (0 - 100) ähnelt.
        /// </summary>
        internal static string SettingsCroppingDeviationToleranceTooltip {
            get {
                return ResourceManager.GetString("SettingsCroppingDeviationToleranceTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Padding: ähnelt.
        /// </summary>
        internal static string SettingsCroppingPadding {
            get {
                return ResourceManager.GetString("SettingsCroppingPadding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Preserves some of the margin area. In Pixels. (0 - XXX) ähnelt.
        /// </summary>
        internal static string SettingsCroppingPaddingTooltip {
            get {
                return ResourceManager.GetString("SettingsCroppingPaddingTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Date ähnelt.
        /// </summary>
        internal static string SettingsDate {
            get {
                return ResourceManager.GetString("SettingsDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Summary ähnelt.
        /// </summary>
        internal static string SettingsDescription {
            get {
                return ResourceManager.GetString("SettingsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Add blank page ähnelt.
        /// </summary>
        internal static string SettingsExperimentalAddBlankPage {
            get {
                return ResourceManager.GetString("SettingsExperimentalAddBlankPage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Enable if the Page Spread alignment of the Ebook appears to be incorrect. ähnelt.
        /// </summary>
        internal static string SettingsExperimentalAddBlankPageTooltip {
            get {
                return ResourceManager.GetString("SettingsExperimentalAddBlankPageTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Create folders for each chapter ähnelt.
        /// </summary>
        internal static string SettingsExperimentalChapterFolders {
            get {
                return ResourceManager.GetString("SettingsExperimentalChapterFolders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Check if files are DRM protected ähnelt.
        /// </summary>
        internal static string SettingsExperimentalDRMProtection {
            get {
                return ResourceManager.GetString("SettingsExperimentalDRMProtection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Fix every page being a chapter ähnelt.
        /// </summary>
        internal static string SettingsExperimentalEveryPageIsChapter {
            get {
                return ResourceManager.GetString("SettingsExperimentalEveryPageIsChapter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Some EPUBs list each page as an individual chapter. This option removes all of them. ähnelt.
        /// </summary>
        internal static string SettingsExperimentalEveryPageIsChapterTooltip {
            get {
                return ResourceManager.GetString("SettingsExperimentalEveryPageIsChapterTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Keep higher resolution cover ähnelt.
        /// </summary>
        internal static string SettingsExperimentalHigherResolutionCover {
            get {
                return ResourceManager.GetString("SettingsExperimentalHigherResolutionCover", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Use metadata title ähnelt.
        /// </summary>
        internal static string SettingsExperimentalMetadataTitle {
            get {
                return ResourceManager.GetString("SettingsExperimentalMetadataTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Preserve page spread alignment ähnelt.
        /// </summary>
        internal static string SettingsExperimentalPageSpread {
            get {
                return ResourceManager.GetString("SettingsExperimentalPageSpread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Tries to preserve correct Page Spread alignment, so a right page will stay on the right and a left page will stay on the left. Assumes EPUB has set this info correctly. ähnelt.
        /// </summary>
        internal static string SettingsExperimentalPageSpreadTooltip {
            get {
                return ResourceManager.GetString("SettingsExperimentalPageSpreadTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Remove duplicate covers ähnelt.
        /// </summary>
        internal static string SettingsExperimentalRemoveDuplicateCovers {
            get {
                return ResourceManager.GetString("SettingsExperimentalRemoveDuplicateCovers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Removes duplicate Cover if it is displayed as the first page again. ähnelt.
        /// </summary>
        internal static string SettingsExperimentalRemoveDuplicateCoversTooltip {
            get {
                return ResourceManager.GetString("SettingsExperimentalRemoveDuplicateCoversTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Split wide images ähnelt.
        /// </summary>
        internal static string SettingsExperimentalSplitPageSpread {
            get {
                return ResourceManager.GetString("SettingsExperimentalSplitPageSpread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Split wide images into two single page images. ähnelt.
        /// </summary>
        internal static string SettingsExperimentalSplitPageSpreadTooltip {
            get {
                return ResourceManager.GetString("SettingsExperimentalSplitPageSpreadTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Blank page behavior ähnelt.
        /// </summary>
        internal static string SettingsExperimentalSpreadInsertBlank {
            get {
                return ResourceManager.GetString("SettingsExperimentalSpreadInsertBlank", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die When preserving Page Spread alignment and a blank image would have to be inserted to do so, check if a blank image is following and if it is, delete that one instead of having two blank images back to back. ähnelt.
        /// </summary>
        internal static string SettingsExperimentalSpreadInsertBlankTooltip {
            get {
                return ResourceManager.GetString("SettingsExperimentalSpreadInsertBlankTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Info to include in ComicInfo.xml: ähnelt.
        /// </summary>
        internal static string SettingsGroupComicInfo {
            get {
                return ResourceManager.GetString("SettingsGroupComicInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cropping: ähnelt.
        /// </summary>
        internal static string SettingsGroupCropping {
            get {
                return ResourceManager.GetString("SettingsGroupCropping", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Experimental Features: ähnelt.
        /// </summary>
        internal static string SettingsGroupExperimental {
            get {
                return ResourceManager.GetString("SettingsGroupExperimental", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Resizing: ähnelt.
        /// </summary>
        internal static string SettingsGroupResizing {
            get {
                return ResourceManager.GetString("SettingsGroupResizing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Image size ähnelt.
        /// </summary>
        internal static string SettingsImageSize {
            get {
                return ResourceManager.GetString("SettingsImageSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die CBZ/ZIP Compression Level: ähnelt.
        /// </summary>
        internal static string SettingsLabelCompressionLevel {
            get {
                return ResourceManager.GetString("SettingsLabelCompressionLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die CPU Threads: ähnelt.
        /// </summary>
        internal static string SettingsLabelThreads {
            get {
                return ResourceManager.GetString("SettingsLabelThreads", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Language ähnelt.
        /// </summary>
        internal static string SettingsLanguage {
            get {
                return ResourceManager.GetString("SettingsLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Page count ähnelt.
        /// </summary>
        internal static string SettingsPageCount {
            get {
                return ResourceManager.GetString("SettingsPageCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Producers ähnelt.
        /// </summary>
        internal static string SettingsProducers {
            get {
                return ResourceManager.GetString("SettingsProducers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Publisher ähnelt.
        /// </summary>
        internal static string SettingsPublisher {
            get {
                return ResourceManager.GetString("SettingsPublisher", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Reading direction ähnelt.
        /// </summary>
        internal static string SettingsReadingDirection {
            get {
                return ResourceManager.GetString("SettingsReadingDirection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Height: ähnelt.
        /// </summary>
        internal static string SettingsResizingHeight {
            get {
                return ResourceManager.GetString("SettingsResizingHeight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Kindle: ähnelt.
        /// </summary>
        internal static string SettingsResizingKindle {
            get {
                return ResourceManager.GetString("SettingsResizingKindle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Kobo: ähnelt.
        /// </summary>
        internal static string SettingsResizingKobo {
            get {
                return ResourceManager.GetString("SettingsResizingKobo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Resize images ähnelt.
        /// </summary>
        internal static string SettingsResizingResizeImages {
            get {
                return ResourceManager.GetString("SettingsResizingResizeImages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Width: ähnelt.
        /// </summary>
        internal static string SettingsResizingWidth {
            get {
                return ResourceManager.GetString("SettingsResizingWidth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Series ähnelt.
        /// </summary>
        internal static string SettingsSeries {
            get {
                return ResourceManager.GetString("SettingsSeries", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Title ähnelt.
        /// </summary>
        internal static string SettingsTitle {
            get {
                return ResourceManager.GetString("SettingsTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Translators ähnelt.
        /// </summary>
        internal static string SettingsTranslators {
            get {
                return ResourceManager.GetString("SettingsTranslators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die You are already using the newest version. ähnelt.
        /// </summary>
        internal static string SettingsUpdateAlreadyOnNewest {
            get {
                return ResourceManager.GetString("SettingsUpdateAlreadyOnNewest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Current Version: ähnelt.
        /// </summary>
        internal static string SettingsUpdateCurrentVersion {
            get {
                return ResourceManager.GetString("SettingsUpdateCurrentVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please check your internet connection or try again later. ähnelt.
        /// </summary>
        internal static string SettingsUpdateErrorBottom {
            get {
                return ResourceManager.GetString("SettingsUpdateErrorBottom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Couldn&apos;t receive the newest release version. ähnelt.
        /// </summary>
        internal static string SettingsUpdateErrorTop {
            get {
                return ResourceManager.GetString("SettingsUpdateErrorTop", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die There is a newer version available. ähnelt.
        /// </summary>
        internal static string SettingsUpdateNewerVersionAvailable {
            get {
                return ResourceManager.GetString("SettingsUpdateNewerVersionAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Newest Version: ähnelt.
        /// </summary>
        internal static string SettingsUpdateNewestVersion {
            get {
                return ResourceManager.GetString("SettingsUpdateNewestVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Update ähnelt.
        /// </summary>
        internal static string SettingsUpdateWindowTitle {
            get {
                return ResourceManager.GetString("SettingsUpdateWindowTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Volume ähnelt.
        /// </summary>
        internal static string SettingsVolume {
            get {
                return ResourceManager.GetString("SettingsVolume", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Settings ähnelt.
        /// </summary>
        internal static string SettingsWindowTitle {
            get {
                return ResourceManager.GetString("SettingsWindowTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error splitting wide image. ähnelt.
        /// </summary>
        internal static string SplitImageError {
            get {
                return ResourceManager.GetString("SplitImageError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Start ähnelt.
        /// </summary>
        internal static string StartButtonText {
            get {
                return ResourceManager.GetString("StartButtonText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Timer: {0}m {1}s {2}ms ähnelt.
        /// </summary>
        internal static string Timer {
            get {
                return ResourceManager.GetString("Timer", resourceCulture);
            }
        }
    }
}
